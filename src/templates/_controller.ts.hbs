import mssql from 'mssql'
import { {{name}} } from './model/{{name}}'

export class {{name}}Controller {
  private dbClient: mssql
  constructor(dbClient: mssql) {
    dbClient = dbClient
  }
  
  createTest(model: {{name}}): Promise<{{name}}> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `INSERT INTO 
        OUTPUT {{#fields}}INSERTED.{{name}}{{/fields}}
        {{schema}}.{{name}}({{#fields}}{{name}}{{/fields}})
        VALUES ({{#fields}}'${model.{{name}}}'{{/fields}})`
      )
      .then((data: any) => {
        resolve(data.recordset)
      })
      .catch(err => reject(err))
    })
  }

  readTest(limit: number = 1000, offset: number = 0): Promise<{{name}}> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `SELECT * FROM {{schema}}.{{name}}
        ORDER BY {{firstField}}
        OFFSET ${offset} ROWS
        FETCH FIRST ${limit} ROWS ONLY`
      )
      .then((data: any) => {
        resolve(data.recordset)
      })
      .catch(err => reject(err))
    })
  }

  updateTest(model: test, firstFieldValue: {{name}}): Promise<{{name}}> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `UPDATE {{schema}}.{{name}}
        SET {{#fields}}{{model}} = ${model.{{name}}}, {{/fields}}
        WHERE {{firstField}} = '${firstFieldValue}`'
      )
      .then((data: any) => {
        resolve(model)
      })
      .catch((err: any) => reject(err))
    })
  }

  deleteTest(firstFieldValue: {{name}}): Promise<boolean> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `DELETE FROM {{schema}}.{{name}}
        WHERE {{firstField}} = ${firstFieldValue}`
      )
      .then((data: any) => {
        resolve(true)
      })
      .catch((err: any) => reject(err))
    })
  }
}