import mssql from 'mssql'
import { {{name}} } from '../model/{{name}}'

export class {{name}}Controller {
  private dbClient: mssql
  constructor(dbClient: mssql) {
    this.dbClient = dbClient
  }
  
  create{{name}}(model: {{name}}): Promise<{{name}}> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `INSERT INTO {{schema}}.{{name}}
        ({{#fields}}{{name}}{{#comma}}, {{/comma}}{{/fields}})
        OUTPUT {{#fields}}INSERTED.{{name}}{{#comma}}, {{/comma}}{{/fields}}
        {{schema}}.{{name}}({{#fields}}{{name}}{{#comma}}, {{/comma}}{{/fields}})
        VALUES ({{#fields}}'${model.{{name}}}'{{#comma}}, {{/comma}}{{/fields}})`
      )
      .then((data: any) => {
        resolve(data.recordset)
      })
      .catch(err => reject(err))
    })
  }

  read{{name}}(firstField?: string, limit: number = 1000, offset: number = 0): Promise<{{name}}[]> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `SELECT * FROM {{schema}}.{{name}}
        ${firstField != null ? 'WHERE {{firstField}} = ${firstField}' : ''}
        ORDER BY {{firstField}}
        OFFSET ${offset} ROWS
        FETCH FIRST ${limit} ROWS ONLY`
      )
      .then((data: any) => {
        resolve(data.recordset)
      })
      .catch(err => reject(err))
    })
  }

  update{{name}}(model: {{name}}, firstFieldValue: string): Promise<{{name}}> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `UPDATE {{schema}}.{{name}}
        SET {{#fields}}{{name}} = ${model.{{name}}}{{#comma}}, {{/comma}}{{/fields}}
        WHERE {{firstField}} = '${firstFieldValue}'`
      )
      .then(() => {
        resolve(model)
      })
      .catch((err: any) => reject(err))
    })
  }

  delete{{name}}(firstFieldValue: string): Promise<boolean> {
    return new Promise((resolve, reject) => {
      this.dbClient.query(
        `DELETE FROM {{schema}}.{{name}}
        WHERE {{firstField}} = '${firstFieldValue}'`
      )
      .then(() => {
        resolve(true)
      })
      .catch((err: any) => reject(err))
    })
  }
}